nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "skip_trimming"
    tag "pipeline"


    test("Skip Trimming") {

        when {
            params {
                input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/demultiplex/samplesheet/1.3.0/flowcell_input.csv'
                demultiplexer = 'bclconvert'
                outdir        = "$outputDir"
                trim_fastq    = false
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions_skip_trimming") },
                { assert workflow.trace.succeeded().size() == 5 },
                { assert path("$outputDir/multiqc/multiqc_report.html").exists() },
                { assert snapshot(
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001_R1_001.fastq.gz.md5"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Undetermined_S0_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/L001/Reports/").list(),
                    ).match("skip_trimming") }
            )
        }

    }

    test("Skip Fastp") {

        when {
            params {
                input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/demultiplex/samplesheet/1.3.0/flowcell_input.csv'
                demultiplexer = 'bclconvert'
                outdir        = "$outputDir"
                skip_tools    = "fastp"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions_skip_fastp") },
                { assert workflow.trace.succeeded().size() == 4 },
                { assert path("$outputDir/multiqc/multiqc_report.html").exists() },
                { assert snapshot(
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001_R1_001.fastq.gz.md5"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Undetermined_S0_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/L001/Reports/").list(),
                    ).match("skip_fastp") }
            )
        }

    }

    test("Skip Fastqc") {

        when {
            params {
                input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/demultiplex/samplesheet/1.3.0/flowcell_input.csv'
                demultiplexer = 'bclconvert'
                outdir        = "$outputDir"
                skip_tools    = "fastqc"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions_skip_fastqc") },
                { assert workflow.trace.succeeded().size() == 5 },
                { assert path("$outputDir/multiqc/multiqc_report.html").exists() },
                { assert snapshot(
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001.fastp.fastq.gz.md5"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Undetermined_S0_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/L001/Reports/").list(),
                    ).match("skip_fastqc") }
            )
        }

    }

    test("Skip Fastp & Fastqc") {

        when {
            params {
                input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/demultiplex/samplesheet/1.3.0/flowcell_input.csv'
                demultiplexer = 'bclconvert'
                outdir        = "$outputDir"
                skip_tools    = "fastp,fastqc"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions_skip_fastp_fastqc") },
                { assert workflow.trace.succeeded().size() == 4 },
                { assert path("$outputDir/multiqc/multiqc_report.html").exists() },
                { assert snapshot(
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001_R1_001.fastq.gz.md5"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Undetermined_S0_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/L001/Reports/").list(),
                    ).match("skip_fastp_fastqc") }
            )
        }

    }

    test("Skip MultiQC") {

        when {
            params {
                input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/demultiplex/samplesheet/1.3.0/flowcell_input.csv'
                demultiplexer = 'bclconvert'
                outdir        = "$outputDir"
                skip_tools    = "multiqc"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions_skip_multiqc") },
                { assert workflow.trace.succeeded().size() == 4 },
                { assert !path("$outputDir/multiqc/multiqc_report.html").exists() },
                { assert snapshot(
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Sample1_S1_L001.fastp.fastq.gz.md5"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/Undetermined_S0_L001_R1_001.fastq.gz"),
                        path("$outputDir/220422_M11111_0222_000000000-K9H97/L001/Reports/").list(),
                    ).match("skip_multiqc") }
            )
        }

    }

}
